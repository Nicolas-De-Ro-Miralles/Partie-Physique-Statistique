def magnetisation_fit(min_value,max_value,sp,N,nx,ny):
    """"
    
    """
    
    alpha,average_magnetisation=mean_magnetisation_alpha(sp,N,0.01,nx,ny)
    find=np.where((min_value<=alpha) & (alpha<=max_value))
    
    x=np.amax(find)
    y=np.amin(find)
    
    x_fit=alpha[y:x+2]
    y_fit=average_magnetisation[y:x+2]
    
    fit=np.polyfit(x_fit,y_fit,1)
    line=fit[0]*x_fit+fit[1]
    
    fig=plt.figure(figsize=(10,7.5))
    
    plt.scatter(alpha,average_magnetisation,s=20,c='c',marker='o')
    
    ax=plt.gca()
    ax.set_title(r"Energie moyenne du système en fonction de $\alpha$")
    plt.minorticks_on()
    plt.grid(b=True, which='major', color='#666666', linestyle='-')
    plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.4)
    plt.xlabel(r"$\alpha$")
    plt.ylabel(r"$<E>$")
    
    plt.plot(x_fit,line,color="m",linestyle="--")    





def mean_magnetisation_alpha_with_fit(sp,N,d_alpha,nx,ny):
    """
    Plots the evolution of the mean energy observed in the system for each value of alpha.
    
    Parameters:
    -----------
    
    N : number of states to look at.
    
    d_alpha : variation of alpha.
    
    nx: :discretization points in x.
    
    ny : discretization points in y.
    
    """
    
    fig=plt.figure(figsize=(10,7.5))
    
    alpha=d_alpha
    
    alpha_value=[] # Ces deux listes nous permettront de déterminer la température de Curie plus tard.
    magnetisation_value=[]
    
    while alpha<=1:
        
        sample_system=[] # On initialise toutes les listes.
        sigma=[]
        
        sample_system=ising_model(sp,alpha,N,nx,ny) # On génère N différents états du système par l'algorithme de Metropolis.
        sigma=sommation(sample_system,N) # Calcule la magnétisation totale pour le système k (0<=k<=N).
        
        z=sum(sigma)/N # Calcule la magnétisation moyenne.
        
        plt.scatter(alpha,z,s=20,c='c',marker='o') # On trace <M> en fonction de alpha.
        
        alpha_value.append(alpha)
        magnetisation_value.append(z)
        
        sp=np.ones([nx,ny]) # On impose à nouveau la condition initiale.
        
        print(alpha)
        alpha=alpha+d_alpha
        
        
    # Onsager fit.
    
    alpha_restrict=np.linspace(0.20,1,100000000)
    onsager=100*(1-(1/(2*(np.sinh(2*alpha_restrict))
                   **4)))**(1/8)

    # Customisation du graphique.
    
    ax=plt.gca()
    ax.set_title(r"Magnétisation moyenne du système en fonction de $\alpha$")
    plt.minorticks_on()
    plt.grid(b=True, which='major', color='#666666', linestyle='-')
    plt.grid(b=True, which='minor', color='#999999', linestyle='-', alpha=0.4)
    plt.xlabel(r"$\alpha$")
    plt.ylabel(r"$<M>$")
    plt.plot(alpha_restrict,onsager,color="m",linestyle="--")
    





